{"version":3,"sources":["components/Episodes/Episodes.js","components/Cards/Cards.js","components/SearchBox/SearchBox.js","components/Characters/Characters.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["styValues","cell","row","rowIndex","colIndex","backgroundColor","fontSize","headerStyle","fontWeight","SearchBar","Search","columns","dataField","text","style","sort","Episodes","options","custom","paginationSize","this","props","rnmInfo","episodes","info","count","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","totalSize","results","contentTable","paginationProps","paginationTableProps","keyField","data","search","toolkitprops","className","searchProps","bootstrap4","striped","hover","condensed","baseProps","loading","pagination","paginationFactory","React","Component","Cards","characters","Container","fluid","Row","map","e","i","Col","xl","lg","mg","sm","key","Card","Img","src","image","ImgOverlay","Text","name","SearchBox","searchChange","InputGroup","FormControl","placeholder","aria-label","onChange","Characters","onSearchChange","evt","setState","searchField","target","value","state","bind","characterInfo","filteredCharacter","filter","character","toLowerCase","includes","length","Home","Jumbotron","GET_RNM_INFO","gql","App","useState","option","setOption","useQuery","error","Navbar","collapseOnSelect","bg","variant","Brand","onClick","Toggle","aria-controls","Collapse","id","Nav","Link","Spinner","animation","role","Boolean","window","location","hostname","match","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e854d405.chunk.js","sourcesContent":["import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\n//import filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport './Episodes.css';\r\n\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\n\r\n\r\n\r\n\r\n\r\nconst styValues = (cell, row, rowIndex, colIndex) => {\r\n  if (rowIndex % 2 === 0) {\r\n    return {\r\n      backgroundColor: '#fff',\r\n      fontSize: '1rem',\r\n    \r\n    };\r\n  }\r\n  return {\r\n    backgroundColor: '#D3D3D3',\r\n    fontSize: '1rem'\r\n  };\r\n}\r\nconst headerStyle={\r\n  fontSize: '1rem',\r\n  fontWeight: 'bold',\r\n  backgroundColor: '#D3D3D3'\r\n}\r\nconst { SearchBar } = Search;\r\nconst columns = [{\r\n    dataField: 'id',\r\n    text: 'ID',\r\n    style: styValues,\r\n    headerStyle: headerStyle\r\n  }, {\r\n    dataField: 'name',\r\n    text: 'Name',\r\n    sort: true,\r\n    style: styValues,\r\n    headerStyle: headerStyle\r\n    // formatter: (cell, row) => types[cell]\r\n  },\r\n{\r\n    dataField: 'air_date',\r\n    text: 'Air Date',\r\n    sort: true,\r\n    style: styValues,\r\n    headerStyle: headerStyle\r\n},\r\n{\r\n    dataField: 'episode',\r\n    text:'S-E Number',\r\n    style: styValues,\r\n    headerStyle: headerStyle\r\n}]\r\nclass Episodes extends React.Component {\r\n//   state = { products }\r\n\r\n//   loadData = () => {\r\n//     this.setState({ products: this.props.rnmInfo.episodes });\r\n//   }\r\n\r\n  render() {\r\n    const options = {\r\n      custom: true,\r\n      paginationSize: this.props.rnmInfo.episodes.info.count,\r\n      pageStartIndex: 1,\r\n      firstPageText: 'First',\r\n      prePageText: 'Back',\r\n      nextPageText: 'Next',\r\n      lastPageText: 'Last',\r\n      nextPageTitle: 'First page',\r\n      prePageTitle: 'Pre page',\r\n      firstPageTitle: 'Next page',\r\n      lastPageTitle: 'Last page',\r\n      showTotal: true,\r\n      totalSize: this.props.rnmInfo.episodes.results\r\n    };\r\n    const contentTable = ({ paginationProps, paginationTableProps }) => (\r\n      <div>\r\n        <ToolkitProvider\r\n          keyField=\"id\"\r\n          columns={ columns }\r\n          data={ this.props.rnmInfo.episodes.results }\r\n          search\r\n        >\r\n          {\r\n            toolkitprops => (\r\n              <div>\r\n                <div className=\"extendWidth\">\r\n                <SearchBar { ...toolkitprops.searchProps } />\r\n                </div>\r\n                <BootstrapTable\r\n                bootstrap4\r\n                  striped\r\n                  hover\r\n                  condensed\r\n                  { ...toolkitprops.baseProps }\r\n                  { ...paginationTableProps }\r\n                  loading={ true } \r\n                />\r\n              </div>\r\n            )\r\n          }\r\n        </ToolkitProvider>\r\n        <div className=\"floatRight\">\r\n          \r\n        <PaginationListStandalone { ...paginationProps } />\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"fadeIn\"> \r\n        <PaginationProvider\r\n          pagination={\r\n            paginationFactory(options)\r\n          }\r\n        >\r\n          { contentTable }\r\n        </PaginationProvider>\r\n      </div >\r\n    );\r\n  }\r\n// render(){\r\n//  return   <h1>Hello</h1>\r\n// }\r\n}\r\n\r\nexport default Episodes;","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport './Card.css';\r\n\r\nexport default function Cards({characters}){\r\n    return (<div className=\" fadeIn fadeOut\">\r\n        <Container fluid>\r\n            <Row>\r\n            {       \r\n                    characters.map((e,i)=>{\r\n                        return (\r\n                            <Col xl={3} lg={4} mg={6} sm={12} key={i}> \r\n                            <Card className=\"text-white m-4 br-2 rounded\" >\r\n                        <Card.Img src={`${e.image}?50*50`} className=\"rounded mx-auto d-block img\" />\r\n                        <Card.ImgOverlay>\r\n                          <Card.Text className=\"name\">{e.name}</Card.Text>\r\n                        </Card.ImgOverlay>\r\n                      </Card>\r\n                      </Col>\r\n                    );\r\n                        })\r\n            }\r\n            </Row>\r\n </Container>\r\n </div>  \r\n);\r\n}","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nexport default function SearchBox({searchChange}){\r\n        return (<div>\r\n              <InputGroup className=\"mb-3\">\r\n    <FormControl\r\n      placeholder=\"Character Name\"\r\n      aria-label=\"Character Name\"\r\n      onChange ={searchChange}\r\n    />\r\n  </InputGroup>\r\n\r\n        </div>)\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport Cards from '../Cards/Cards';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\n\r\n\r\n\r\n\r\nclass Characters extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            characters:[],\r\n            searchField:''\r\n        }\r\n        this.onSearchChange = this.onSearchChange.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        this.setState({characters: this.props.characterInfo.characters.results})\r\n    }\r\n    onSearchChange=(evt)=>{\r\n       this.setState({searchField: evt.target.value})\r\n }\r\n    render(){\r\n        const {characters,searchField}= this.state;\r\n        const filteredCharacter = characters.filter(character =>{\r\n            return character.name.toLowerCase().includes(searchField.toLowerCase());\r\n          }) \r\n        return (<div className=\"fadeIn\"><SearchBox searchChange={this.onSearchChange}/>{\r\n        filteredCharacter.length>0 ?\r\n            <Cards characters={filteredCharacter}/>:\r\n            <h1>Oops... Such character does not exist...</h1>\r\n        }\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Characters;","import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function Home(){\r\n        return (<div className=\"fadeIn\">\r\n             <Jumbotron fluid>\r\n  <Container >\r\n    <h1>Rick-And-Morty TV Show</h1>\r\n    <p>\r\n    The show revolves around the adventures of the members of the Smith household, which consists of parents Jerry and Beth, their children Summer and Morty, and Beth's father, Rick Sanchez, who lives with them as a guest. According to Justin Roiland, the family lives outside of Seattle, Washington.[2] The adventures of Rick and Morty, however, take place across an infinite number of realities, with the characters travelling to other planets and dimensions through portals and Rick's flying car.\r\n    </p>\r\n    <p>\r\n    Rick is an eccentric and alcoholic mad scientist, who eschews many ordinary conventions such as school, marriage, love, and family. He frequently goes on adventures with his 14-year-old grandson, Morty, a kind-hearted but easily distressed boy, whose naïve but grounded moral compass plays counterpoint to Rick's Machiavellian ego. Morty's 17-year-old sister, Summer, is a more conventional teenager who worries about improving her status among her peers and sometimes follows Rick and Morty on their adventures. The kids' mother, Beth, is a generally level-headed person and assertive force in the household, though self-conscious about her professional role as a horse surgeon. She is dissatisfied with her marriage to Jerry, a simple-minded and insecure person, who disapproves of Rick's influence over his family.\r\n    </p>\r\n    <p>\r\n    Different versions of the characters inhabit other dimensions throughout the multiverse and their personal characteristics can vary from one reality to another. The show's original Rick identifies himself as \"Rick Sanchez of Earth Dimension C-137\", in reference to his original universe, but this does not necessarily apply to every other member of the Smith household. For instance, in the first-season episode \"Rick Potion #9\", after turning the entire world population into monsters, Rick and Morty move to a different dimension, leaving Summer, Beth and Jerry behind.\r\n    </p>\r\n  </Container>\r\n</Jumbotron>\r\n\r\n        </div>)\r\n\r\n}\r\n\r\n","import React,{useState} from 'react';\nimport './App.css';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from \"graphql-tag\";\nimport Episodes from './components/Episodes/Episodes';\nimport {Spinner,Navbar,Nav} from 'react-bootstrap';\nimport Characters from './components/Characters/Characters';\nimport Home  from './components/Home/Home';\n\nconst GET_RNM_INFO = gql`query {\n  episodes {\n    info{\n      count,\n      pages\n      \n    }\n    results {\n      id,\n      name,\n      air_date,\n      episode\n    }\n  },\n  characters {\n    info{\n      count,\n      pages\n  }\n    results {\n      name,\n      image\n    }\n  }\n}`;\n\nfunction App() {\n  const [option, setOption] = useState('home');\n  \n  const { data, loading, error } = useQuery(GET_RNM_INFO);\n\n\n  if (error) return <div className=\"App\"><p>Error</p></div>;\n  return (\n    \n    <div className=\"App\">\n      <Navbar collapseOnSelect  bg=\"dark\" variant=\"dark\">\n  <Navbar.Brand onClick={()=>\n      setOption('home')\n    \n      }>Rick-And-Morty</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link onClick={()=>\n      setOption('characters')\n    \n      }>Characters</Nav.Link>\n      <Nav.Link onClick={()=>\n      setOption('episodes')\n    \n      }>Episodes</Nav.Link>\n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n\n\n{loading ?\n  <div className=\"adjustSides\"><Spinner animation=\"border\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</Spinner></div>:\n\n\n \noption ==='home'?\n<div className=\"adjustSidesChar\"><Home />\n</div>:\noption ==='characters' ?\n<div className=\"adjustSidesChar\"><Characters characterInfo ={data}/>\n</div>\n:\n\n        <div className=\"adjustSides\"><Episodes rnmInfo={data} /></div>\n\n}\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://rickandmortyapi.com/graphql/'\n})\n\nconst client = new ApolloClient({\n  cache,\n  link\n})\nReactDOM.render(\n\n   <ApolloProvider client={client}><App /></ApolloProvider>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}